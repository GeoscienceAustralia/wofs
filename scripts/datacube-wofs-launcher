#!/usr/bin/env python
#
# This is the top-level interface to the application and for launching PBS jobs.
#
# It is the recommended user interface, and wraps lower level interfaces.
#
# Note the "--config" argument refers to the datacube.conf file
# that specifies e.g. which database index to connect to.
#
# The app_config argument maps to the ".yaml" config used within the
# python datacube app. (This script will prepend the appropriate
# subdirectory path. The "list" subcommand is effectively a directory
# listing.)
#

from __future__ import print_function

import subprocess
import click
import glob
import os
from pathlib import Path

ROOT_DIR = Path(__file__).absolute().parent.parent
CONFIG_DIR = ROOT_DIR / 'wofs/../../../../'
SCRIPT_DIR = ROOT_DIR / 'scripts'


@click.group(help='Datacube WOfS Application Launcher')
def cli():
    pass


@cli.command(name='list', help='List all installed app config files')
def list_command():
    """
     List installed WOfS config files
    :return: None
    """
    for cfg in (glob.glob(os.path.abspath(os.path.join(CONFIG_DIR,
                                                       "wofs/config/*.yaml")),
                          recursive=True)):
        click.echo(cfg)


@cli.command(short_help='Submit a job to qsub',
             help='Submit a job to qsub for '
                  'an app_config (from the list command), '
                  'and either a year or range of years (eg 1990-1994) '
                  'or a taskfile created earlier')
@click.option('--queue', '-q', default='normal',
              type=click.Choice(['normal', 'express']))
@click.option('--project', '-P', default='v10')
@click.option('--nodes', '-n', required=True,
              help='Number of nodes to request',
              type=click.IntRange(1, 100))
@click.option('--walltime', '-t', default=10,
              help='Number of hours to request',
              type=click.IntRange(1, 48))
@click.option('--name', help='Job name to use')
@click.option('--config', help='Datacube config file',
              type=click.Path(exists=True, dir_okay=False))
@click.option('--env', help='Node environment setup script',
              type=click.Path(exists=True, dir_okay=False))
@click.option('--taskfile', required=False, help='Task file',
              type=click.Path(exists=True, dir_okay=False))
@click.option('--no-confirm', required=False, help="Don't ask for confirmation or perform file check",
              is_flag=True)
@click.option('--web-ui', help='Launch the bokeh web interface',
              is_flag=True)
@click.argument('app_config')
@click.argument('year', required=False, default=None)
def qsub(app_config, year, queue, project, nodes, walltime, name, no_confirm, web_ui, config=None, env=None,
         taskfile=None):
    """
     Top level interface to the WOfS application and lauch using PBS jobs.
    :param app_config: WOfS product configuration file (*.yaml)
    :param year: Year to apply WOfS
    :param queue: PBS job queue (express | normal)
    :param project: Specify a project for the job
    :param nodes: Number of nodes
    :param walltime: Job execution wall-time
    :param name: Job name
    :param no_confirm: Don't ask for confirmation or perform file check
    :param web_ui: Flag to enable launch of bokeh web interface
    :param config: Datacube configuration file
    :param env: Node environment setup script
    :param taskfile: Qsub task file (if we have one else task file shall be created internally)
    :return: None
    """
    confirm = not no_confirm
    app_config = CONFIG_DIR / app_config

    config_arg = '-C "%(config)s"' % dict(config=config) if config else ''
    env_arg = '--env "%(env)s"' % dict(env=env) if env else ''

    if taskfile is None:
        if not app_config.exists():
            print('%s is not a valid WOfS application config file' % app_config)
            return 1

        _do_system_check(config_arg)
        taskfile = _make_taskfile(year, app_config, config_arg, confirm)
        if confirm:
            # skip the file check if the user isn't paying attention
            _do_file_check(taskfile, config_arg)
    else:
        taskfile = Path(taskfile).absolute()

    _do_qsub(taskfile, name, nodes, walltime, queue, project, config_arg, env_arg, confirm, web_ui)


def _do_system_check(config_arg):
    """Checks the connection to the database"""
    check_cmd = 'datacube %(config_arg)s -v system check' % dict(
        config_arg=config_arg,
    )
    subprocess.check_call(check_cmd, shell=True)


def _make_taskfile(year, app_config, config_arg, confirm=True):
    """Makes the taskfile for the given year or years"""
    year_append = '_{}'.format(year) if year is not None else ''
    taskfile = Path(app_config.stem + year_append + '.bin').absolute()

    year_arg = '--year %(year)s' % dict(year=year) if year is not None else ''
    prep = 'datacube-wofs %(config_arg)s --app-config "%(app_config)s" %(year_arg)s --save-tasks "%(taskfile)s"'
    cmd = prep % dict(config_arg=config_arg,
                      app_config=app_config,
                      taskfile=taskfile,
                      year_arg=year_arg)
    if not confirm or click.confirm('\n' + cmd + '\nRUN?', default=True):
        subprocess.check_call(cmd, shell=True)

    return taskfile


def _do_file_check(taskfile, config_arg, confirm=True):
    """Checks for tasks with output files that already exist"""
    test = 'datacube-wofs -v %(config_arg)s --load-tasks "%(taskfile)s" --dry-run'
    cmd = test % dict(config_arg=config_arg,
                      taskfile=taskfile)
    if not confirm or click.confirm('\n' + cmd + '\nRUN?', default=False):
        subprocess.check_call(cmd, shell=True)


def _do_qsub(taskfile, name, nodes, walltime, queue, project, config_arg, env_arg, confirm=True, web_ui=False):
    """Submits the job to qsub"""
    name = name or taskfile.stem
    app_cmd = ('datacube-wofs -v {config_arg} '
               '--load-tasks "{taskfile}" '
               '--queue-size {queue_size} '
               '--executor distributed DSCHEDULER'.format(config_arg=config_arg,
                                                          taskfile=taskfile,
                                                          queue_size=nodes * 16 * 2,
                                                          ))

    distr_cmd = '"%(distr)s" %(env_arg)s --ppn 16 %(app_cmd)s %(bokeh)s' % dict(
        distr=SCRIPT_DIR / 'distributed.sh',
        env_arg=env_arg,
        app_cmd=app_cmd,
        bokeh='--bokeh' if web_ui else ''
    )

    l_args = 'ncpus=%(ncpus)d,mem=%(mem)dgb,walltime=%(walltime)d:00:00,other=%(other)s' % dict(
        ncpus=nodes * 16,
        mem=nodes * 31,
        walltime=walltime,
        other='gdata2',
    )

    qsub_template = 'qsub -q %(queue)s -N %(name)s -P %(project)s -l %(l_args)s -- /bin/bash %(distr_cmd)s'
    cmd = qsub_template % dict(queue=queue,
                               name=name,
                               project=project,
                               l_args=l_args,
                               distr_cmd=distr_cmd,
                               )

    if not confirm or click.confirm('\n' + cmd + '\nRUN?', default=True):
        subprocess.check_call(cmd, shell=True)


if __name__ == '__main__':
    cli()
